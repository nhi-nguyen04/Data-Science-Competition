set.seed(6)
show_engines("boost_tree")
lgbm_model <- boost_tree() %>%
set_mode("classification") %>%
set_engine("lightgbm", verbose = -1)
# -----------------------------------------------
lgbm_wf_h1n1 <- workflow() %>%
add_recipe(h1n1_recipe) %>%
add_model(lgbm_model)
lgbm_wf_seas <- workflow() %>%
add_recipe(seas_recipe) %>%
add_model(lgbm_model)
lgbm_h1n1_base <- lgbm_wf_h1n1 %>% last_fit(split = data_split_h1n1)
library(lightgbm)
library(bonsai)
library(tidyverse)
library(tidymodels)
library(lightgbm)
library(bonsai)
# Then load both packages
library(tidyverse)
library(tidymodels)
library(bonsai)
library(lightgbm)
l
# Then load both packages
library(tidyverse)
library(tidymodels)
library(bonsai)
library(lightgbm)
library(tune)
library(baguette)
library(future)
library(vip)
library(skimr)
library(stacks)
set.seed(6)
show_engines("boost_tree")
# -----------------------------------------------
# 2. LOAD DATA
# -----------------------------------------------
train_features <- read_csv("Data/training_set_features.csv")
train_labels   <- read_csv("Data/training_set_labels.csv")
train_df       <- left_join(train_features, train_labels, by = "respondent_id")
test_df        <- read_csv("Data/test_set_features.csv")
# -----------------------------------------------
# 3. DATA PREPARATION
# -----------------------------------------------
train_df <- train_df %>%
mutate(
h1n1_vaccine     = factor(h1n1_vaccine, levels = c(1, 0)),
seasonal_vaccine = factor(seasonal_vaccine, levels = c(1, 0))
)
# this gives us a break down of the variables in the dataset
#skim(train_df)
# IDENTIFY NUMERIC VS. CATEGORICAL BY TYPE
# (Rather than manually listing variable names)
# First, convert any integer‐coded categories to factor *if* they’re not already numeric
# For example: if 'age_group' was stored as integer 1:4 representing bins, do:
# train_df <- train_df %>% mutate(age_group = factor(age_group))
# After that, let tidymodels detect which are numeric vs. nominal:
numeric_vars     <- train_df %>% select(where(is.numeric))    %>% names()
numeric_vars
categorical_vars <- train_df %>% select(where(is.character), where(is.factor)) %>% names()
categorical_vars
# Remove the target + ID from those lists
numeric_vars     <- setdiff(numeric_vars,    c("respondent_id"))
numeric_vars
categorical_vars <- setdiff(categorical_vars, c("respondent_id", "h1n1_vaccine", "seasonal_vaccine"))
categorical_vars
# -----------------------------------------------
# 4. SPLIT DATA (PER TARGET)
# -----------------------------------------------
data_split_h1n1 <- initial_split(train_df, prop = 0.8, strata = h1n1_vaccine)
train_data_h1n1 <- training(data_split_h1n1)
eval_data_h1n1  <- testing(data_split_h1n1)
data_split_seas <- initial_split(train_df, prop = 0.8, strata = seasonal_vaccine)
train_data_seas <- training(data_split_seas)
eval_data_seas  <- testing(data_split_seas)
# -----------------------------------------------
# 5. SPECIFY BASE MODEL
# -----------------------------------------------
lgbm_model <- boost_tree() %>%
set_mode("classification") %>%
set_engine("lightgbm", verbose = -1)
# -----------------------------------------------
# 6. RECIPES
# -----------------------------------------------
# H1N1 Recipe
h1n1_recipe <- recipe(h1n1_vaccine ~ ., data = train_data_h1n1) %>%
update_role(respondent_id, new_role = "ID") %>%
step_rm(seasonal_vaccine) %>%
step_impute_median(all_numeric_predictors()) %>%
step_unknown(all_nominal_predictors()) %>%
step_interact(terms = ~ doctor_recc_h1n1:opinion_h1n1_vacc_effective:opinion_h1n1_risk) %>%
step_interact(terms = ~ doctor_recc_seasonal:opinion_seas_vacc_effective) %>%
step_interact(terms = ~ h1n1_concern:opinion_h1n1_risk) %>%
step_interact(terms = ~ opinion_h1n1_sick_from_vacc:opinion_seas_sick_from_vacc) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_zv(all_predictors())
# Seasonal Recipe
seas_recipe <- recipe(seasonal_vaccine ~ ., data = train_data_seas) %>%
update_role(respondent_id, new_role = "ID") %>%
step_rm(h1n1_vaccine) %>%
step_impute_median(all_numeric_predictors()) %>%
step_unknown(all_nominal_predictors()) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_interact(terms = ~ opinion_seas_vacc_effective:opinion_seas_risk:doctor_recc_seasonal) %>%
step_interact(terms = ~ opinion_h1n1_risk:opinion_seas_vacc_effective) %>%
step_interact(terms = ~ opinion_seas_sick_from_vacc:opinion_h1n1_sick_from_vacc) %>%
step_zv(all_predictors())
# -----------------------------------------------
# 7. WORKFLOWS
# -----------------------------------------------
lgbm_wf_h1n1 <- workflow() %>%
add_recipe(h1n1_recipe) %>%
add_model(lgbm_model)
lgbm_wf_seas <- workflow() %>%
add_recipe(seas_recipe) %>%
add_model(lgbm_model)
lgbm_h1n1_base <- lgbm_wf_h1n1 %>% last_fit(split = data_split_h1n1)
lgbm_seas_base <- lgbm_wf_seas %>% last_fit(split = data_split_seas)
lgbm_h1n1_base %>% collect_metrics()
lgbm_seas_base %>% collect_metrics()
h1n1_base_preds <- collect_predictions(lgbm_h1n1_base)
seas_base_preds <- collect_predictions(lgbm_seas_base)
roc_curve(h1n1_base_preds, truth = h1n1_vaccine, .pred_1) %>% autoplot() + ggtitle("H1N1 ROC (LightGBM)")
roc_curve(seas_base_preds, truth = seasonal_vaccine, .pred_1) %>% autoplot() + ggtitle("Seasonal ROC (LightGBM)")
custom_metrics <- metric_set(accuracy, sens, spec, roc_auc)
custom_metrics(h1n1_base_preds, truth = h1n1_vaccine, estimate = .pred_class, .pred_1)
custom_metrics(seas_base_preds, truth = seasonal_vaccine, estimate = .pred_class, .pred_1)
plan(multisession, workers = 4)
h1n1_folds <- vfold_cv(train_data_h1n1, v = 10, strata = h1n1_vaccine)
seasonal_folds <- vfold_cv(train_data_seas, v = 10, strata = seasonal_vaccine)
cv_metrics <- metric_set(accuracy, roc_auc, sens, spec)
lgbm_h1n1_rs <- fit_resamples(
lgbm_wf_h1n1,
resamples = h1n1_folds,
metrics = cv_metrics
)
lgbm_seas_rs <- fit_resamples(
lgbm_wf_seas,
resamples = seasonal_folds,
metrics = cv_metrics
)
lgbm_h1n1_rs %>% collect_metrics()
lgbm_seas_rs %>% collect_metrics()
show_engines("boost_tree")
library(tidyverse)
library(tidymodels)
library(bonsai)
library(catboost)
cb_wf_h1n1 <- workflow() %>%
add_recipe(h1n1_recipe) %>%
add_model(cb_model)
show_engines("boost_tree")
set.seed(6)
# -----------------------------------------------
# 2. LOAD DATA
# -----------------------------------------------
train_features <- read_csv("Data/training_set_features.csv")
train_labels   <- read_csv("Data/training_set_labels.csv")
train_df       <- left_join(train_features, train_labels, by = "respondent_id")
test_df        <- read_csv("Data/test_set_features.csv")
# -----------------------------------------------
# 3. DATA PREPARATION
# -----------------------------------------------
train_df <- train_df %>%
mutate(
h1n1_vaccine     = factor(h1n1_vaccine, levels = c(1, 0)),
seasonal_vaccine = factor(seasonal_vaccine, levels = c(1, 0))
)
numeric_vars     <- train_df %>% select(where(is.numeric)) %>% names() %>% setdiff("respondent_id")
categorical_vars <- train_df %>% select(where(is.character), where(is.factor)) %>% names() %>% setdiff(c("respondent_id", "h1n1_vaccine", "seasonal_vaccine"))
# -----------------------------------------------
# 4. CREATE TWO SEPARATE SPLITS (ONE PER TARGET)
# -----------------------------------------------
data_split_h1n1 <- initial_split(train_df, prop = 0.8, strata = h1n1_vaccine)
train_data_h1n1 <- training(data_split_h1n1)
eval_data_h1n1  <- testing(data_split_h1n1)
data_split_seas <- initial_split(train_df, prop = 0.8, strata = seasonal_vaccine)
train_data_seas <- training(data_split_seas)
eval_data_seas  <- testing(data_split_seas)
# -----------------------------------------------
# 5. SPECIFY BASE MODEL (CatBoost)
# -----------------------------------------------
cb_model <- parsnip::boost_tree(mode="classification") %>%
set_engine(
"catboost"
)
h1n1_recipe <- recipe(h1n1_vaccine ~ ., data = train_data_h1n1) %>%
update_role(respondent_id, new_role = "ID") %>%
step_rm(seasonal_vaccine) %>%
step_impute_median(all_numeric_predictors()) %>%
step_unknown(all_nominal_predictors()) %>%
step_interact(terms = ~ doctor_recc_h1n1:opinion_h1n1_vacc_effective:opinion_h1n1_risk) %>%
step_interact(terms = ~ doctor_recc_seasonal:opinion_seas_vacc_effective) %>%
step_interact(terms = ~ h1n1_concern:opinion_h1n1_risk) %>%
step_interact(terms = ~ opinion_h1n1_sick_from_vacc:opinion_seas_sick_from_vacc) %>%
step_zv(all_predictors())
seas_recipe <- recipe(seasonal_vaccine ~ ., data = train_data_seas) %>%
update_role(respondent_id, new_role = "ID") %>%
step_rm(h1n1_vaccine) %>%
step_impute_median(all_numeric_predictors()) %>%
step_unknown(all_nominal_predictors()) %>%
step_interact(terms = ~ opinion_seas_vacc_effective:opinion_seas_risk:doctor_recc_seasonal) %>%
step_interact(terms = ~ opinion_h1n1_risk:opinion_seas_vacc_effective) %>%
step_interact(terms = ~ opinion_seas_sick_from_vacc:opinion_h1n1_sick_from_vacc) %>%
step_zv(all_predictors())
# -----------------------------------------------
# 7. WORKFLOWS
# -----------------------------------------------
cb_wf_h1n1 <- workflow() %>%
add_recipe(h1n1_recipe) %>%
add_model(cb_model)
cb_wf_seas <- workflow() %>%
add_recipe(seas_recipe) %>%
add_model(cb_model)
cb_h1n1_base_fit <- cb_wf_h1n1 %>% last_fit(split = data_split_h1n1)
library(tidyverse)
library(tidymodels)
library(bonsai)
library(catboost)
show_engines("boost_tree")
install.packages("catboost", repos = "https://cloud.r-project.org")
remotes::install_github(
"catboost/catboost",
subdir = "catboost/R-package",
dependencies = TRUE
)
library(catboost)
show_engines("boost_tree")
cb_h1n1_base_fit <- cb_wf_h1n1 %>% last_fit(split = data_split_h1n1)
install.packages("catboost")
install.packages('remotes')
remotes::install_github('catboost/catboost', subdir = 'catboost/R-package')
install.packages("remotes")
remotes::install_url('https://github.com/catboost/catboost/releases/download/v1.2.8/catboost-R-darwin-universal2-1.2.8.tgz', INSTALL_opts = c("--no-multiarch", "--no-test-load"))
library(catboost)
library(tidyverse)
library(tidymodels)
library(bonsai)
library(catboost)
show_engines("boost_tree")
install.packages("catboost")
R.version.string
install.packages("catboost", repos = "https://catboost-r-releases.storage.yandexcloud.net/")
devtools::install_github('catboost/catboost', subdir = 'catboost/R-package')
install.packages("catboost", repos = "https://catboost-r-releases.storage.yandexcloud.net/")
cb_model <- parsnip::boost_tree(mode="classification") %>%
set_engine(
"catboost"
)
cb_model
cb_wf_h1n1 <- workflow() %>%
add_recipe(h1n1_recipe) %>%
add_model(cb_model)
cb_wf_h1n1
cb_wf_h1n1 %>% last_fit(split = data_split_h1n1)
library(tidyverse)
library(tidymodels)
library(bonsai)
library(catboost)
library(tidyverse)
library(tidymodels)
library(bonsai)
#library(catboost)
library(tune)
library(baguette)
library(future)
library(vip)
library(skimr)
library(stacks)
show_engines("boost_tree")
set.seed(6)
# -----------------------------------------------
# 2. LOAD DATA
# -----------------------------------------------
train_features <- read_csv("Data/training_set_features.csv")
train_labels   <- read_csv("Data/training_set_labels.csv")
train_df       <- left_join(train_features, train_labels, by = "respondent_id")
test_df        <- read_csv("Data/test_set_features.csv")
# -----------------------------------------------
# 3. DATA PREPARATION
# -----------------------------------------------
train_df <- train_df %>%
mutate(
h1n1_vaccine     = factor(h1n1_vaccine, levels = c(1, 0)),
seasonal_vaccine = factor(seasonal_vaccine, levels = c(1, 0))
)
numeric_vars     <- train_df %>% select(where(is.numeric)) %>% names() %>% setdiff("respondent_id")
categorical_vars <- train_df %>% select(where(is.character), where(is.factor)) %>% names() %>% setdiff(c("respondent_id", "h1n1_vaccine", "seasonal_vaccine"))
# -----------------------------------------------
# 4. CREATE TWO SEPARATE SPLITS (ONE PER TARGET)
# -----------------------------------------------
data_split_h1n1 <- initial_split(train_df, prop = 0.8, strata = h1n1_vaccine)
train_data_h1n1 <- training(data_split_h1n1)
eval_data_h1n1  <- testing(data_split_h1n1)
data_split_seas <- initial_split(train_df, prop = 0.8, strata = seasonal_vaccine)
train_data_seas <- training(data_split_seas)
eval_data_seas  <- testing(data_split_seas)
# -----------------------------------------------
# 5. SPECIFY BASE MODEL (CatBoost)
# -----------------------------------------------
cb_model <- parsnip::boost_tree(mode="classification") %>%
set_engine(
"catboost"
)
# -----------------------------------------------
# 6. R E C I P E –– Optimized for H1N1 (no dummying or normalization)
# -----------------------------------------------
h1n1_recipe <- recipe(h1n1_vaccine ~ ., data = train_data_h1n1) %>%
update_role(respondent_id, new_role = "ID") %>%
step_rm(seasonal_vaccine) %>%
step_impute_median(all_numeric_predictors()) %>%
step_unknown(all_nominal_predictors()) %>%
step_interact(terms = ~ doctor_recc_h1n1:opinion_h1n1_vacc_effective:opinion_h1n1_risk) %>%
step_interact(terms = ~ doctor_recc_seasonal:opinion_seas_vacc_effective) %>%
step_interact(terms = ~ h1n1_concern:opinion_h1n1_risk) %>%
step_interact(terms = ~ opinion_h1n1_sick_from_vacc:opinion_seas_sick_from_vacc) %>%
step_zv(all_predictors())
seas_recipe <- recipe(seasonal_vaccine ~ ., data = train_data_seas) %>%
update_role(respondent_id, new_role = "ID") %>%
step_rm(h1n1_vaccine) %>%
step_impute_median(all_numeric_predictors()) %>%
step_unknown(all_nominal_predictors()) %>%
step_interact(terms = ~ opinion_seas_vacc_effective:opinion_seas_risk:doctor_recc_seasonal) %>%
step_interact(terms = ~ opinion_h1n1_risk:opinion_seas_vacc_effective) %>%
step_interact(terms = ~ opinion_seas_sick_from_vacc:opinion_h1n1_sick_from_vacc) %>%
step_zv(all_predictors())
# -----------------------------------------------
# 7. WORKFLOWS
# -----------------------------------------------
cb_wf_h1n1 <- workflow() %>%
add_recipe(h1n1_recipe) %>%
add_model(cb_model)
cb_wf_seas <- workflow() %>%
add_recipe(seas_recipe) %>%
add_model(cb_model)
# -----------------------------------------------
# 8. TRAIN THE WORKFLOW (Baseline, without hyperparameter tuning)
# -----------------------------------------------
# Fit on training split and evaluate on held-out test
cb_h1n1_base_fit <- cb_wf_h1n1 %>% last_fit(split = data_split_h1n1)
library(tidyverse)
library(tidymodels)
library(bonsai)
#library(catboost)
library(tune)
library(baguette)
library(future)
library(vip)
library(skimr)
library(stacks)
show_engines("boost_tree")
set.seed(6)
# -----------------------------------------------
# 2. LOAD DATA
# -----------------------------------------------
train_features <- read_csv("Data/training_set_features.csv")
train_labels   <- read_csv("Data/training_set_labels.csv")
train_df       <- left_join(train_features, train_labels, by = "respondent_id")
test_df        <- read_csv("Data/test_set_features.csv")
# -----------------------------------------------
# 3. DATA PREPARATION
# -----------------------------------------------
train_df <- train_df %>%
mutate(
h1n1_vaccine     = factor(h1n1_vaccine, levels = c(1, 0)),
seasonal_vaccine = factor(seasonal_vaccine, levels = c(1, 0))
)
numeric_vars     <- train_df %>% select(where(is.numeric)) %>% names() %>% setdiff("respondent_id")
categorical_vars <- train_df %>% select(where(is.character), where(is.factor)) %>% names() %>% setdiff(c("respondent_id", "h1n1_vaccine", "seasonal_vaccine"))
# -----------------------------------------------
# 4. CREATE TWO SEPARATE SPLITS (ONE PER TARGET)
# -----------------------------------------------
data_split_h1n1 <- initial_split(train_df, prop = 0.8, strata = h1n1_vaccine)
train_data_h1n1 <- training(data_split_h1n1)
eval_data_h1n1  <- testing(data_split_h1n1)
data_split_seas <- initial_split(train_df, prop = 0.8, strata = seasonal_vaccine)
train_data_seas <- training(data_split_seas)
eval_data_seas  <- testing(data_split_seas)
# -----------------------------------------------
# 5. SPECIFY BASE MODEL (CatBoost)
# -----------------------------------------------
cb_model <- parsnip::boost_tree(mode="classification") %>%
set_engine(
"catboost"
)
# -----------------------------------------------
# 6. R E C I P E –– Optimized for H1N1 (no dummying or normalization)
# -----------------------------------------------
h1n1_recipe <- recipe(h1n1_vaccine ~ ., data = train_data_h1n1) %>%
update_role(respondent_id, new_role = "ID") %>%
step_rm(seasonal_vaccine) %>%
step_impute_median(all_numeric_predictors()) %>%
step_unknown(all_nominal_predictors()) %>%
step_interact(terms = ~ doctor_recc_h1n1:opinion_h1n1_vacc_effective:opinion_h1n1_risk) %>%
step_interact(terms = ~ doctor_recc_seasonal:opinion_seas_vacc_effective) %>%
step_interact(terms = ~ h1n1_concern:opinion_h1n1_risk) %>%
step_interact(terms = ~ opinion_h1n1_sick_from_vacc:opinion_seas_sick_from_vacc) %>%
step_zv(all_predictors())
seas_recipe <- recipe(seasonal_vaccine ~ ., data = train_data_seas) %>%
update_role(respondent_id, new_role = "ID") %>%
step_rm(h1n1_vaccine) %>%
step_impute_median(all_numeric_predictors()) %>%
step_unknown(all_nominal_predictors()) %>%
step_interact(terms = ~ opinion_seas_vacc_effective:opinion_seas_risk:doctor_recc_seasonal) %>%
step_interact(terms = ~ opinion_h1n1_risk:opinion_seas_vacc_effective) %>%
step_interact(terms = ~ opinion_seas_sick_from_vacc:opinion_h1n1_sick_from_vacc) %>%
step_zv(all_predictors())
# -----------------------------------------------
# 7. WORKFLOWS
# -----------------------------------------------
cb_wf_h1n1 <- workflow() %>%
add_recipe(h1n1_recipe) %>%
add_model(cb_model)
cb_wf_h1n1
cb_wf_seas <- workflow() %>%
add_recipe(seas_recipe) %>%
add_model(cb_model)
# -----------------------------------------------
# 8. TRAIN THE WORKFLOW (Baseline, without hyperparameter tuning)
# -----------------------------------------------
# Fit on training split and evaluate on held-out test
cb_h1n1_base_fit <- cb_wf_h1n1 %>% last_fit(split = data_split_h1n1)
install.packages("catboost")
install.packages('remotes')
remotes::install_url('BINARY_URL'[, INSTALL_opts = c("--no-multiarch", "--no-test-load")])
remotes::install_url('https://github.com/catboost/catboost/releases/download/v1.2.8/catboost-R-darwin-universal2-1.2.8.tgz', INSTALL_opts = c("--no-multiarch", "--no-test-load"))
show_engines("boost_tree")
library(tidyverse)
library(tidymodels)
library(bonsai)
#library(catboost)
library(tune)
library(baguette)
library(future)
library(vip)
library(skimr)
library(stacks)
show_engines("boost_tree")
# -----------------------------------------------
train_features <- read_csv("Data/training_set_features.csv")
train_labels   <- read_csv("Data/training_set_labels.csv")
train_df       <- left_join(train_features, train_labels, by = "respondent_id")
test_df        <- read_csv("Data/test_set_features.csv")
# -----------------------------------------------
# 3. DATA PREPARATION
# -----------------------------------------------
train_df <- train_df %>%
mutate(
h1n1_vaccine     = factor(h1n1_vaccine, levels = c(1, 0)),
seasonal_vaccine = factor(seasonal_vaccine, levels = c(1, 0))
)
numeric_vars     <- train_df %>% select(where(is.numeric)) %>% names() %>% setdiff("respondent_id")
categorical_vars <- train_df %>% select(where(is.character), where(is.factor)) %>% names() %>% setdiff(c("respondent_id", "h1n1_vaccine", "seasonal_vaccine"))
# -----------------------------------------------
# 4. CREATE TWO SEPARATE SPLITS (ONE PER TARGET)
# -----------------------------------------------
data_split_h1n1 <- initial_split(train_df, prop = 0.8, strata = h1n1_vaccine)
train_data_h1n1 <- training(data_split_h1n1)
eval_data_h1n1  <- testing(data_split_h1n1)
data_split_seas <- initial_split(train_df, prop = 0.8, strata = seasonal_vaccine)
train_data_seas <- training(data_split_seas)
eval_data_seas  <- testing(data_split_seas)
# -----------------------------------------------
# 5. SPECIFY BASE MODEL (CatBoost)
# -----------------------------------------------
cb_model <- parsnip::boost_tree(mode="classification") %>%
set_engine(
"catboost"
)
# -----------------------------------------------
# 6. R E C I P E –– Optimized for H1N1 (no dummying or normalization)
# -----------------------------------------------
h1n1_recipe <- recipe(h1n1_vaccine ~ ., data = train_data_h1n1) %>%
update_role(respondent_id, new_role = "ID") %>%
step_rm(seasonal_vaccine) %>%
step_impute_median(all_numeric_predictors()) %>%
step_unknown(all_nominal_predictors()) %>%
step_interact(terms = ~ doctor_recc_h1n1:opinion_h1n1_vacc_effective:opinion_h1n1_risk) %>%
step_interact(terms = ~ doctor_recc_seasonal:opinion_seas_vacc_effective) %>%
step_interact(terms = ~ h1n1_concern:opinion_h1n1_risk) %>%
step_interact(terms = ~ opinion_h1n1_sick_from_vacc:opinion_seas_sick_from_vacc) %>%
step_zv(all_predictors())
seas_recipe <- recipe(seasonal_vaccine ~ ., data = train_data_seas) %>%
update_role(respondent_id, new_role = "ID") %>%
step_rm(h1n1_vaccine) %>%
step_impute_median(all_numeric_predictors()) %>%
step_unknown(all_nominal_predictors()) %>%
step_interact(terms = ~ opinion_seas_vacc_effective:opinion_seas_risk:doctor_recc_seasonal) %>%
step_interact(terms = ~ opinion_h1n1_risk:opinion_seas_vacc_effective) %>%
step_interact(terms = ~ opinion_seas_sick_from_vacc:opinion_h1n1_sick_from_vacc) %>%
step_zv(all_predictors())
# -----------------------------------------------
# 7. WORKFLOWS
# -----------------------------------------------
cb_wf_h1n1 <- workflow() %>%
add_recipe(h1n1_recipe) %>%
add_model(cb_model)
cb_wf_h1n1
cb_wf_seas <- workflow() %>%
add_recipe(seas_recipe) %>%
add_model(cb_model)
# -----------------------------------------------
# 8. TRAIN THE WORKFLOW (Baseline, without hyperparameter tuning)
# -----------------------------------------------
# Fit on training split and evaluate on held-out test
cb_h1n1_base_fit <- cb_wf_h1n1 %>% last_fit(split = data_split_h1n1)
library(catboost)
install.packages("catboost")
